#ifndef _ALIGN_DATA_H_
#define _ALIGN_DATA_H_
#include "AlignmentParser.h"
#include "MICData.h"
#include "DiscrData.h"
//typedef unsigned char DisDataT;

const static double blosum100joint[20][20]={
{0.034, 0.0016, 0.0013, 0.0014, 0.0013, 0.0015, 0.0022, 0.0042, 0.0007, 0.0019, 0.0027, 0.0022, 0.0008, 0.001, 0.0017, 0.0058, 0.0032, 0.0003, 0.0008, 0.0037},
{0.0016, 0.0266, 0.0013, 0.0009, 0.0002, 0.0017, 0.0017, 0.0011, 0.001, 0.0007, 0.0013, 0.0052, 0.0005, 0.0005, 0.0006, 0.0015, 0.0012, 0.0002, 0.0005, 0.0009},
{0.0013, 0.0013, 0.0204, 0.003, 0.0004, 0.0011, 0.0015, 0.0019, 0.001, 0.0005, 0.0007, 0.0017, 0.0003, 0.0004, 0.0004, 0.0023, 0.0017, 0.0001, 0.0005, 0.0007},
{0.0014, 0.0009, 0.003, 0.0321, 0.0002, 0.0011, 0.0047, 0.0018, 0.0006, 0.0005, 0.0007, 0.0015, 0.0002, 0.0004, 0.0007, 0.0019, 0.0013, 0.0001, 0.0004, 0.0007},
{0.0013, 0.0002, 0.0004, 0.0002, 0.0201, 0.0002, 0.0002, 0.0004, 0.0001, 0.0009, 0.001, 0.0003, 0.0003, 0.0005, 0.0002, 0.0009, 0.0008, 0.0001, 0.0003, 0.0011},
{0.0015, 0.0017, 0.0011, 0.0011, 0.0002, 0.0139, 0.0029, 0.0008, 0.001, 0.0005, 0.0011, 0.0024, 0.0006, 0.0004, 0.0006, 0.0013, 0.001, 0.0002, 0.0004, 0.0007},
{0.0022, 0.0017, 0.0015, 0.0047, 0.0002, 0.0029, 0.0297, 0.0012, 0.0009, 0.0007, 0.001, 0.0027, 0.0004, 0.0004, 0.0009, 0.0022, 0.0015, 0.0001, 0.0004, 0.0012},
{0.0042, 0.0011, 0.0019, 0.0018, 0.0004, 0.0008, 0.0012, 0.0581, 0.0005, 0.0006, 0.0012, 0.0015, 0.0004, 0.0006, 0.0008, 0.0029, 0.0015, 0.0002, 0.0004, 0.0009},
{0.0007, 0.001, 0.001, 0.0006, 0.0001, 0.001, 0.0009, 0.0005, 0.0138, 0.0003, 0.0006, 0.0007, 0.0002, 0.0005, 0.0003, 0.0008, 0.0006, 0.0001, 0.0012, 0.0004},
{0.0019, 0.0007, 0.0005, 0.0005, 0.0009, 0.0005, 0.0007, 0.0006, 0.0003, 0.0284, 0.009, 0.0008, 0.0022, 0.002, 0.0005, 0.0011, 0.0019, 0.0002, 0.001, 0.0112},
{0.0027, 0.0013, 0.0007, 0.0007, 0.001, 0.0011, 0.001, 0.0012, 0.0006, 0.009, 0.0526, 0.0013, 0.0045, 0.0041, 0.0008, 0.0015, 0.0021, 0.0004, 0.0014, 0.0071},
{0.0022, 0.0052, 0.0017, 0.0015, 0.0003, 0.0024, 0.0027, 0.0015, 0.0007, 0.0008, 0.0013, 0.024, 0.0006, 0.0006, 0.0009, 0.0019, 0.0015, 0.0001, 0.0005, 0.0011},
{0.0008, 0.0005, 0.0003, 0.0002, 0.0003, 0.0006, 0.0004, 0.0004, 0.0002, 0.0022, 0.0045, 0.0006, 0.0093, 0.0009, 0.0003, 0.0005, 0.0008, 0.0002, 0.0003, 0.0019},
{0.001, 0.0005, 0.0004, 0.0004, 0.0005, 0.0004, 0.0004, 0.0006, 0.0005, 0.002, 0.0041, 0.0006, 0.0009, 0.0257, 0.0003, 0.0008, 0.0008, 0.0007, 0.0044, 0.0017},
{0.0017, 0.0006, 0.0004, 0.0007, 0.0002, 0.0006, 0.0009, 0.0008, 0.0003, 0.0005, 0.0008, 0.0009, 0.0003, 0.0003, 0.0263, 0.0011, 0.0008, 0.0001, 0.0002, 0.0007},
{0.0058, 0.0015, 0.0023, 0.0019, 0.0009, 0.0013, 0.0022, 0.0029, 0.0008, 0.0011, 0.0015, 0.0019, 0.0005, 0.0008, 0.0011, 0.024, 0.0047, 0.0002, 0.0007, 0.0017},
{0.0032, 0.0012, 0.0017, 0.0013, 0.0008, 0.001, 0.0015, 0.0015, 0.0006, 0.0019, 0.0021, 0.0015, 0.0008, 0.0008, 0.0008, 0.0047, 0.0243, 0.0002, 0.0006, 0.0029},
{0.0003, 0.0002, 0.0001, 0.0001, 0.0001, 0.0002, 0.0001, 0.0002, 0.0001, 0.0002, 0.0004, 0.0001, 0.0002, 0.0007, 0.0001, 0.0002, 0.0002, 0.0107, 0.0009, 0.0003},
{0.0008, 0.0005, 0.0005, 0.0004, 0.0003, 0.0004, 0.0004, 0.0004, 0.0012, 0.001, 0.0014, 0.0005, 0.0003, 0.0044, 0.0002, 0.0007, 0.0006, 0.0009, 0.0197, 0.0009},
{0.0037, 0.0009, 0.0007, 0.0007, 0.0011, 0.0007, 0.0012, 0.0009, 0.0004, 0.0112, 0.0071, 0.0011, 0.0019, 0.0017, 0.0007, 0.0017, 0.0029, 0.0003, 0.0009, 0.0329}};



class AlignData 
{

    AlignmentParser* mParser;
    int mNumCols;
    int mNumRows;

    double** mK22Table; 
    double** mK1Table;//[21][21]; 
    double** mTransition;
    double*  mTransMargin;
    DisDataT** mRawData;
    DiscrData* mData;
    int getAAIndex(char C);
    void initData();
    void init21Data();
    void initDataBlock();
    void initK22Table();
    void initK1Table();
    double K22(int aa_i, int aa_j, int bb_i, int bb_j);
    double K1(int a, int a_prime);
    double lookupK1(int hidden,int obs);
    double lookupK22(int h1, int h2, int obs1, int obs2);
    void  allocateTransition();
    void  computeTransition();
    void  normalize(double** vect, int size);
    void setData();
  public:
    AlignData(AlignmentParser* parser);
    ~AlignData();
    DiscrData* getData() {return mData; }

   // void initializeData(AlignmentParser* p);
};


#endif
