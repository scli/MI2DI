#include "JointProbMatrix.h"
#include <iostream>
#include <stdlib.h>
using namespace std;



JointProbMatrix::JointProbMatrix(MICData* data)
{
   mData=data; 
   mRawData=mData->getRawData();

   allocateSpace();
   countNumPairs();
   convertCountsToProbMatrix();
   computeProbCols();
}
JointProbMatrix::~JointProbMatrix()
{
  ;
}

void
JointProbMatrix::allocateSpace()
{

   int size     = mData->getNumCols();
   int tot_size = mData->getNumHiddenClus();
  
   //cout<<size<<" "<<tot_size<<endl;
   mJointProbMat =new double *[tot_size]; //to score the joint frequencies
   for(int i=0; i< tot_size; i++)
   {
      mJointProbMat[i]=new double[tot_size];
      for(int j=0; j<tot_size; j++)
      {
         mJointProbMat[i][j]=0;
      }
   }

   mMargin=new double *[size]; //to score the single column frequencies
   for(int i=0; i<size; i++)
   {
     mMargin[i]=new double[mData->getHiddenDim(i)];
     for(int j=0; j<mData->getHiddenDim(i); j++)
     {
         mMargin[i][j]=0;
     }
   }

   int tot_obs_size=mData->getNumObserveClus();

   mNumPairMatrix=new double* [tot_obs_size];
   for(int i=0; i<tot_obs_size; i++)
   {
     mNumPairMatrix[i]=new double[tot_obs_size];
     for(int j=0; j< tot_obs_size; j++)
     {
       mNumPairMatrix[i][j]=0;
     }
   }

   
   mNumSingular    =new double * [size];
   for(int i=0; i<size; i++)
   {
      mNumSingular[i]    =new double [mData->getObserveDim(i)];
      for(int j=0; j<mData->getObserveDim(i); j++)
      {
        mNumSingular[i][j]=0;
      }
   }

   mWeights    =new double *[size]; //number of pairs for each (i, j)
   for(int i=0; i<size; i++)
   {
      mWeights[i]   =new double[size];
      for(int j=0; j<size; j++)
      {
         mWeights[i][j]   =0;
      }
   }
   
   mSingularWeights=new double [size];
   for(int i=0; i<size; i++)
   {
      mSingularWeights[i]=0;
   }
   

}

double
JointProbMatrix::getProbs(int col_id, int hidden_clu)
{
   double rev=0;

   int num_obs=mData->getObserveDim(col_id);
   for(int i=0; i<num_obs; i++)
   {
      rev+=mNumSingular[col_id][i]*mData->lookupK1(col_id, hidden_clu, i);
   }
   return rev;
}

void
JointProbMatrix::computeProbCols()
{
   
   int size = mData->getNumCols();

   for(int i=0; i<size; i++)
   {
      int dim=mData->getHiddenDim(i);
      for(int j=0; j<dim; j++)
      {
        mMargin[i][j]=getProbs(i, j);
      }
     
      for(int j=0; j<dim; j++)
      {
          mMargin[i][j]/=mSingularWeights[i];
      }
   }

   for(int i=0; i<size; i++)
   { 
       int dim    = mData->getHiddenDim(i);
       int off    = mData->getHiddenOffset(i);
       int obs_dim= mData->getObserveDim(i);
       for(int a=0; a<dim; a++)
       {
          for(int b=0; b<dim; b++)
          {
              mJointProbMat[off+a][off+b]=0;
          }
       }

       for(int a=0; a<dim; a++)
       {
           for(int b=0; b<obs_dim; b++)
           {
              mJointProbMat[off+a][off+a]+=mNumSingular[i][b]*mData->lookupK1(i, a, b);
           }
           mJointProbMat[off+a][off+a]/=mSingularWeights[i];
       }
    }
}

void
JointProbMatrix::countSanderNumPairs()
{

   int num_replicates=mData->getNumRows();
   int size=mData->getNumCols();  

   for(int i=0; i<num_replicates; i++)
   {
      double sum=0;
      for(int j=0;  j<num_replicates; j++)
      {
         sum+=mData->similarity(mRawData[j], mRawData[j]);
      }//for
       
      for(int pos1=0; pos1<size; pos1++)
      {
         int index1=mData->getIndex(pos1, mRawData[i][pos1]);
         int off1=mData->getObserveOffset(pos1);
         
         mNumSingular[pos1][index1]+=1/sum;
         
         for(int pos2=0; pos2<size; pos2++)
         {
            int off2=mData->getObserveOffset(pos2);
             
           int index2=mData->getIndex(pos2, mRawData[i][pos2]);
           mNumPairMatrix[off1+index1][off2+index2]+=1/sum;
         }//for
      }//for
     // cout<<i<<" "<<(1/pairs[0])<<" "<<(1/singular[0])<<endl;
   }
   //exit(0);
}

void
JointProbMatrix::countSimpleContinuousNumPairs()
{

   int num_replicates=mData->getNumRows();
   int size=mData->getNumCols();  
   

   //first, compute the weight for each replication
   double* weight=new double[num_replicates];
   for(int i=0; i<num_replicates; i++)
   {
      double sum=0;
      for(int j=0;  j<num_replicates; j++)
      {
         sum+=mData->similarity(mRawData[j], mRawData[j]);
      }//for
      weight[i]=1/sum; 
      for(int pos1=0; pos1<size; pos1++)
      {
         int index1=mData->getIndex(pos1, i);
         int off1=mData->getObserveOffset(pos1);
         
         mNumSingular[pos1][index1]+=1/sum;
         
         for(int pos2=0; pos2<size; pos2++)
         {
            int off2=mData->getObserveOffset(pos2);
             
           int index2=mData->getIndex(pos2, i);
          // mNumPairMatrix[off1+index1][off2+index2]+=1/sum*(mData->getValue(pos1, i)*mData->getValue(pos2, i));
         }//for
      }//for
     // cout<<i<<" "<<(1/pairs[0])<<" "<<(1/singular[0])<<endl;
   }
   //exit(0);
}




void
JointProbMatrix::countNumPairs()
{
   int num_replicates=mData->getNumRows();
   int size=mData->getNumCols();
   double* pairs=new double[size*size];
   double* singular=new double[size];
   for(int i=0; i<num_replicates; i++)
   {
      pairAndSingularWeights(i, pairs, singular);
      for(int pos1=0; pos1<size; pos1++)
      {
         int index1=mData->getIndex(pos1, mRawData[i][pos1]);
         int off1=mData->getObserveOffset(pos1);
         
         mNumSingular[pos1][index1]+=1/singular[pos1];
         
         for(int pos2=0; pos2<size; pos2++)
         {
            int off2=mData->getObserveOffset(pos2);
             
           int index2=mData->getIndex(pos2, mRawData[i][pos2]);
           //cout<<bb1index<<" "<<bb2index<<endl;
           mNumPairMatrix[off1+index1][off2+index2]+=1/pairs[pos1*size+pos2];
         }
      }
      //cout<<i<<" "<<(1/pairs[0])<<" "<<(1/singular[0])<<endl;
   }
   //exit(0);
   delete pairs;
   delete singular;


}

void
JointProbMatrix::pairAndSingularWeights(int row, double* weights, double* singularWeights)
{
   int size=mData->getNumCols();  
   for(int j=0; j<size*size; j++) weights[j]=0;
   for(int j=0; j<size;      j++) singularWeights[j]=0;

   int num_replicates=mData->getNumRows(); 

   for(int j=0; j<num_replicates; j++)
   {
      double sim=mData->similarity(mRawData[row], mRawData[j]);
      
      for(int pos1=0; pos1<size; pos1++)
      {
          int index_a1 =    mData->getIndex(pos1, mRawData[row][pos1] );
          int index_b1 =    mData->getIndex(pos1, mRawData[ j ][pos1] );

          singularWeights[pos1] += mData->localSingularSimilarity(pos1, index_a1, index_b1, sim);

          for(int pos2=0; pos2<size; pos2++)
          {
            int index_a2 = mData->getIndex(pos2, mRawData[row][pos2]);
            int index_b2 = mData->getIndex(pos2, mRawData[ j ][pos2]);

            weights[pos1*size+pos2] += mData->localPairSimilarity(pos1, pos2, index_a1, index_a2, 
                                                           index_b1, index_b2, sim);
          }
       }
   }

   for(int i=0; i<size; i++)
   {
      for(int j=0; j<size; j++)
      {
             mWeights[i][j]+=1/weights[i*size+j];
             if(weights[i*size+j]==0)
             {
               cerr<<"Bugs 1 "<<endl;
             }
      }
   }
   for(int i=0; i<size; i++)
   {
      mSingularWeights[i]+=1/singularWeights[i]; 
      if(singularWeights[i]==0)
      {
               cerr<<"Bugs 2 "<<endl;
      }
   }

   return;
}


void
JointProbMatrix::convertCountsToProbMatrix()
{

   int num_cols = mData->getNumCols();
 
   for(int i=0; i<num_cols; i++)
   {
      for(int j=0; j<num_cols; j++)
      {
         computeSmallProbMatrix(i, j);
      }

   }

   for(int i=0; i<num_cols; i++)
   {
     int dim1=mData->getHiddenDim(i);
     int off1=mData->getHiddenOffset(i);
     
     for(int j=0; j<num_cols; j++)
     {
       int dim2=mData->getHiddenDim(j);
       int off2=mData->getHiddenOffset(j);
       for(int k1=0; k1<dim1; k1++)
       {
          for(int k2=0; k2<dim2; k2++)
          {
             //cout<<i<<" "<<j<<" "<<k1<<" "<<k2<<" "<<mJointProbMat[off1+k1][off2+k2]<<endl; 
              mJointProbMat[off1+k1][off2+k2]/=mWeights[i][j];
          }
       
       }
      
      }

   }
   //exit(0);

}

double
JointProbMatrix::getProbs(int col_id1, int col_id2, int hidden1, int hidden2)
{
    double rev=0;
    int num_obs1=mData->getObserveDim(col_id1);
    int num_obs2=mData->getObserveDim(col_id2);

    int off1 =   mData->getObserveOffset(col_id1);
    int off2 =   mData->getObserveOffset(col_id2);

    for(int obs1=0; obs1<num_obs1; obs1++)
    {
        for(int obs2=0; obs2<num_obs2; obs2++)
        {
            rev+=mNumPairMatrix[off1+obs1][off2+obs2]*mData->lookupK22(col_id1, col_id2, hidden1, hidden2, obs1, obs2);
        }
    }
    return rev;
}

void
JointProbMatrix::computeSmallProbMatrix(int pos1, int pos2)
{
   int off1=mData->getHiddenOffset(pos1);
   int off2=mData->getHiddenOffset(pos2);

   int dim1=mData->getHiddenDim(pos1);
   int dim2=mData->getHiddenDim(pos2);
   
   for(int h1=0; h1<dim1; h1++)
   {
      for(int h2=0; h2<dim2; h2++)
      {
        mJointProbMat[off1+h1][off2+h2]=getProbs(pos1, pos2, h1, h2);
      }
   }
}


